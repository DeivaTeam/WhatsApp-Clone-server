type Query {
  chats: [Chat!]! @auth
  chat(chatId: ID!): Chat @auth
}

type Subscription {
  chatAdded: Chat
  chatUpdated: Chat
}

type Chat {
  #May be a chat or a group
  id: ID!
  createdAt: Date!
  #Computed for chats
  name: String
  #Computed for chats
  picture: String
  #All members, current and past ones. Includes users who still didn't get the chat listed.
  allTimeMembers: [User!]!
  #Whoever gets the chat listed. For groups includes past members who still didn't delete the group. For chats they are the only ones who can send messages.
  listingMembers: [User!]!
  #Actual members of the group. Null for chats. For groups they are the only ones who can send messages. They aren't the only ones who get the group listed.
  actualGroupMembers: [User!]
  #Null for chats
  admins: [User!]
  #If null the group is read-only. Null for chats.
  owner: User
  #Computed property
  isGroup: Boolean!
}

type Mutation {
  addChat(userId: ID!): Chat @auth
  addGroup(userIds: [ID!]!, groupName: String!, groupPicture: String): Chat @auth
  updateGroup(chatId: ID!, groupName: String, groupPicture: String): Chat @auth
  removeChat(chatId: ID!): ID @auth
  addAdmins(groupId: ID!, userIds: [ID!]!): [ID]! @auth
  removeAdmins(groupId: ID!, userIds: [ID!]!): [ID]! @auth
  addMembers(groupId: ID!, userIds: [ID!]!): [ID]! @auth
  removeMembers(groupId: ID!, userIds: [ID!]!): [ID]! @auth
}
